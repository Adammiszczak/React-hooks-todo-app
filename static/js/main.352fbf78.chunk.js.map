{"version":3,"sources":["ListTodo/ListTodo.js","FormTodo/FormTodo.js","App.js","serviceWorker.js","index.js"],"names":["ListTodo","todos","deleteTodo","editTodo","useState","isEdit","setIsEdit","editedVal","editValue","ListGroup","className","map","todo","index","Item","key","Button","variant","size","data-number","onClick","event","console","log","target","dataset","Form","inline","onSubmit","preventDefault","Control","type","placeholder","onChange","value","FormTodo","saveTodo","setTodo","Group","controlId","Label","MainNav","Fragment","Navbar","collapseOnSelect","fixed","expand","bg","Toggle","aria-controls","Collapse","id","Nav","Link","href","to","Home","setTodos","Container","fluid","Row","Col","todoText","trimmedText","trim","length","todoIndex","editedValue","editedTodos","newTodos","filter","el","About","lg","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.352fbf78.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst ListTodo = ({ todos, deleteTodo, editTodo }) => {\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [editedVal, editValue] = useState('');\r\n\r\n  return (\r\n    <ListGroup className=\"my-3\">\r\n      {todos.map((todo, index) => (\r\n        <ListGroup.Item key={index}>\r\n          <span className=\"mx-3\">{todo}</span>\r\n          <Button\r\n            className=\"mx-1\"\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            key={`editBtn${index}`}\r\n            data-number={`editBtn${index}`}\r\n            onClick={(event) => {\r\n                console.log(event.target.dataset[\"number\"]);\r\n              setIsEdit(event.target.dataset[\"number\"]);\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Button\r\n            className=\"mx-1\"\r\n            variant=\"danger\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              deleteTodo(index);\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n          {isEdit === `editBtn${index}` ? (\r\n            <Form inline\r\n              className=\"my-1 textc-center justify-content-center\"\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                setIsEdit(!isEdit);\r\n                console.log(editedVal);\r\n                editTodo(index,editedVal);\r\n              }}\r\n            >\r\n              <Form.Control\r\n               type=\"text\" \r\n               placeholder=\"Edit your todo\" \r\n               onChange={(event) => {\r\n                   editValue(event.target.value)\r\n               }}\r\n               />\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Change\r\n              </Button>\r\n            </Form>\r\n          ) : null}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default ListTodo;\r\n","import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction FormTodo({ saveTodo }) {\r\n    const [value, setTodo] = useState('');\r\n\r\n    return (\r\n        <Form\r\n            onSubmit={(event) => {\r\n                event.preventDefault();\r\n                saveTodo(value);\r\n                setTodo('');\r\n            }}>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Single ToDo Name</Form.Label>\r\n                <Form.Control placeholder=\"Enter your Todo\" onChange={(event) => {\r\n                    setTodo(event.target.value);\r\n                }} value={value} />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default FormTodo;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport ListTodo from './ListTodo/ListTodo';\nimport FormTodo from './FormTodo/FormTodo';\n\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction MainNav() {\n  return (\n    <React.Fragment>\n      <Navbar collapseOnSelect fixed=\"top\" expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\"><Link className=\"nav-link\" to=\"/\">Home page</Link></Nav.Link>\n            <Nav.Link href=\"/about\"><Link className=\"nav-link\" to=\"/about\">About project</Link></Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </React.Fragment>\n  );\n}\n\nfunction Home() {\n\n  const [todos, setTodos] = useState([]);\n\n  return (\n    <Container fluid={true} className=\"d-flex flex-column vh-100 align-items-center justify-content-center\">\n      <Row className=\"text-center my-5\">\n        <Col className=\"text-center\">\n          <h1>React ToDo App with hooks</h1>\n          <FormTodo saveTodo={(todoText) => {\n            const trimmedText = todoText.trim();\n\n            if (trimmedText.length > 0) {\n              setTodos([...todos, trimmedText]);\n            }\n          }} />\n          <ListTodo \n          todos={todos}\n          editTodo={(todoIndex,editedValue) => {\n            console.log(todoIndex);\n            let editedTodos = [...todos];\n            editedTodos[todoIndex] = editedValue;\n            console.log(editedValue);\n            setTodos(editedTodos);\n          }}\n          deleteTodo={(todoIndex) => {\n            const newTodos = todos.filter((el,index) => index !== todoIndex);\n            setTodos(newTodos);\n          }}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nfunction About() {\n  return (\n    <Container fluid={true} className=\"d-flex vh-100 align-items-center justify-content-center\">\n      <Row lg={12} className=\"text-center\">\n        <Col className=\"text-center\">\n          <h1>About Page</h1>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router basename=\"/react-hooks-todo-app/\">\n        <MainNav />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}