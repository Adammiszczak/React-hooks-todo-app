{"version":3,"sources":["ListTodo/ListTodo.js","FormTodo/FormTodo.js","SingleTodo/SingleTodo.js","App.js","serviceWorker.js","index.js"],"names":["ListTodo","todos","deleteTodo","editTodo","finishTodo","useState","isEdit","setIsEdit","editedVal","editValue","ListGroup","className","map","todo","index","Item","key","isFinished","task","Button","variant","size","data-number","onClick","event","console","log","target","dataset","disabled","Form","inline","onSubmit","preventDefault","Control","type","placeholder","onChange","value","FormTodo","saveTodo","setTodo","Group","controlId","Label","SingleTodo","todoId","useParams","Container","fluid","Row","lg","Col","MainNav","Fragment","Navbar","collapseOnSelect","fixed","expand","bg","Toggle","aria-controls","Collapse","id","Nav","Link","href","to","Home","setTodos","todoText","trimmedText","trim","length","todoIndex","editedValue","editedTodos","newTodos","filter","el","About","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bad60236.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst ListTodo = ({ todos, deleteTodo, editTodo, finishTodo }) => {\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [editedVal, editValue] = useState(\"\");\r\n\r\n  return (\r\n    <ListGroup className=\"my-3\">\r\n      {todos.map((todo, index) => (\r\n        <ListGroup.Item key={index}>\r\n          <div className={todo.isFinished ? \"text-muted mb-2\" : \" mb-2\"}>{todo.task}</div>\r\n          <Button\r\n            className=\"mx-1\"\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            key={`editBtn${index}`}\r\n            data-number={`editBtn${index}`}\r\n            onClick={(event) => {\r\n              console.log(event.target.dataset[\"number\"]);\r\n              setIsEdit(event.target.dataset[\"number\"]);\r\n            }}\r\n            disabled={todo.isFinished}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Button\r\n            className=\"mx-1\"\r\n            variant=\"danger\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              deleteTodo(index);\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n          {todo.isFinished ? \r\n          (<Button\r\n            className=\"mx-1\"\r\n            variant=\"danger\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              finishTodo(index);\r\n            }}\r\n          >\r\n            Not Done\r\n          </Button>) : \r\n          (<Button\r\n            className=\"mx-1\"\r\n            variant=\"success\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              finishTodo(index);\r\n            }}\r\n          >\r\n            Done\r\n          </Button>)}\r\n\r\n          {isEdit === `editBtn${index}` ? (\r\n            <Form\r\n              inline\r\n              className=\"mt-2 textc-center justify-content-center\"\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                setIsEdit(!isEdit);\r\n                console.log(editedVal);\r\n                editTodo(index, editedVal);\r\n              }}\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Edit your todo\"\r\n                onChange={(event) => {\r\n                  editValue(event.target.value);\r\n                }}\r\n              />\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Change\r\n              </Button>\r\n            </Form>\r\n          ) : null}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default ListTodo;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction FormTodo({ saveTodo }) {\r\n  const [value, setTodo] = useState(\"\");\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={(event) => {\r\n        event.preventDefault();\r\n        saveTodo(value);\r\n        setTodo({\"task\":\"\"});\r\n      }}\r\n    >\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>Single ToDo Name</Form.Label>\r\n        <Form.Control\r\n          placeholder=\"Enter your Todo\"\r\n          onChange={(event) => {\r\n            setTodo({\"task\":event.target.value});\r\n          }}\r\n          value={value.task}\r\n        />\r\n      </Form.Group>\r\n      <Button variant=\"primary\" type=\"submit\">\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default FormTodo;\r\n","import React from 'react'\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nfunction SingleTodo() {\r\n    let { todoId } = useParams();\r\n    return (\r\n        <Container\r\n            fluid={true}\r\n            className=\"d-flex vh-100 align-items-center justify-content-center\">\r\n            <Row lg={12} className=\"text-center\">\r\n                <Col className=\"text-center\">\r\n                    <h1>Single Todo - {todoId}</h1>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SingleTodo\r\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport ListTodo from \"./ListTodo/ListTodo\";\nimport FormTodo from \"./FormTodo/FormTodo\";\nimport SingleTodo from \"./SingleTodo/SingleTodo\"\n\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction MainNav() {\n    return (\n        <React.Fragment>\n            <Navbar collapseOnSelect fixed=\"top\" expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"/\">\n                            <Link className=\"nav-link\" to=\"/\">\n                                Home page\n                            </Link>\n                        </Nav.Link>\n                        <Nav.Link href=\"/about\">\n                            <Link className=\"nav-link\" to=\"/about\">\n                                About project\n                            </Link>\n                        </Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </React.Fragment>\n    );\n}\n\nfunction Home() {\n    const [todos,\n        setTodos] = useState([\n        {\n            \"todoId\": 1,\n            isFinished: false,\n            task: \"First Default Task\"\n        }\n    ]);\n\n    return (\n        <Container\n            fluid={true}\n            className=\"d-flex flex-column vh-100 align-items-center justify-content-center\">\n            <Row className=\"text-center my-5\">\n                <Col className=\"text-center\">\n                    <h1>React ToDo App with hooks</h1>\n                    <FormTodo\n                        saveTodo={(todoText) => {\n                        const trimmedText = todoText\n                            .task\n                            .trim();\n                        if (trimmedText.length > 0) {\n                            setTodos([\n                                ...todos, {\n                                    \"todoId\": todos.length + 1,\n                                    \"task\": trimmedText,\n                                    \"isFinished\": false\n                                }\n                            ]);\n                        }\n                    }}/>\n                    <ListTodo\n                        todos={todos}\n                        editTodo={(todoIndex, editedValue) => {\n                        console.log(todoIndex);\n                        let editedTodos = [...todos];\n                        editedTodos[todoIndex].task = editedValue;\n                        console.log(editedValue);\n                        setTodos(editedTodos);\n                    }}\n                        deleteTodo={(todoIndex) => {\n                        const newTodos = todos.filter((el, index) => index !== todoIndex);\n                        setTodos(newTodos);\n                    }}\n                        finishTodo={(todoIndex) => {\n                        let editedTodos = [...todos];\n                        editedTodos[todoIndex].isFinished = !editedTodos[todoIndex].isFinished;\n                        console.log(editedTodos[todoIndex].isFinished);\n                        setTodos(editedTodos);\n                    }}/>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nfunction About() {\n    return (\n        <Container\n            fluid={true}\n            className=\"d-flex vh-100 align-items-center justify-content-center\">\n            <Row lg={12} className=\"text-center\">\n                <Col className=\"text-center\">\n                    <h1>About Page</h1>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router basename=\"/react-hooks-todo-app/\">\n                <MainNav/>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route path=\"/about\" component={About}/>\n                    <Route path=\"/todo/:todoId\">\n                      <SingleTodo />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}